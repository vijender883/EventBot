{
  "pdf_9aec543c_patient_data": {
    "schema": {
      "Patient ID": "string",
      "Name": "string",
      "Age": "integer",
      "Gender": "string",
      "Blood Type": "string",
      "Contact": "string",
      "Address": "string",
      "Admission Date": "string"
    },
    "description": "## Table Description: `pdf_9aec543c_patient_data`\n\n### 1. Table Metadata\n\n* **Table Name:** `pdf_9aec543c_patient_data`\n* **Table Purpose:** Stores demographic and admission information for patients.\n* **Columns:**\n    * `Patient ID` (VARCHAR(255)): Unique identifier for each patient.  Potentially a primary key, though not explicitly stated.\n    * `Name` (VARCHAR(255)): Patient's full name.\n    * `Age` (INT): Patient's age in years.\n    * `Gender` (VARCHAR(255)): Patient's gender (includes \"Other\").\n    * `Blood Type` (VARCHAR(255)): Patient's blood type (e.g., A+, B-, O-).\n    * `Contact` (VARCHAR(255)): Patient's contact phone number.\n    * `Address` (VARCHAR(255)): Patient's address.\n    * `Admission Date` (VARCHAR(255)): Date of the patient's admission (YYYY-MM-DD format).\n* **Key Identifier Column:** `Patient ID` is the most likely primary key, given its role as a unique identifier.\n\n\n### 2. Sample Data Context\n\nThe sample data provides a snippet of patient records, showcasing the structure and typical values within the table.  The data is formatted as a comma-separated values (CSV) style, with each row representing a single patient and each column representing a patient attribute.  `Patient ID` values are sequential (PAT0001, PAT0002, etc.), `Admission Date` is in YYYY-MM-DD format, and other fields contain typical alphanumeric values for names, addresses, phone numbers, blood types, and ages.\n\n\n### 3. Table Purpose\n\nThis table represents a registry of patient information.  Its main use case is to provide a centralized repository for accessing patient demographics and admission dates, enabling efficient retrieval of patient details for various purposes within a healthcare system or application.\n\n\n### 4. Common Query Patterns\n\n* **Retrieve patient information by ID:**  `SELECT * FROM pdf_9aec543c_patient_data WHERE Patient ID = 'PAT0001';`\n* **Find patients admitted within a specific date range:** `SELECT * FROM pdf_9aec543c_patient_data WHERE Admission Date BETWEEN '2024-10-01' AND '2024-11-30';`\n* **Count patients by blood type:** `SELECT Blood Type, COUNT(*) FROM pdf_9aec543c_patient_data GROUP BY Blood Type;`\n\n\n### 5. Data Characteristics\n\n* **Total Number of Records:** 50\n* **Notable Data Patterns:**  `Patient ID` appears to be sequentially generated.  The `Admission Date` field suggests recent admissions (2024-2025).  The `Gender` field includes an \"Other\" category, indicating a more inclusive approach to gender recording.  No clear relationships with other external tables are apparent from the provided information.  The data type of `Admission Date` as VARCHAR might cause performance issues and is a potential area for improvement (consider converting to DATE).\n\n\nThis comprehensive description should allow an LLM to understand the table's structure, content, and typical usage scenarios, enabling it to generate accurate and relevant SQL queries.",
    "file_hash": "9aec543c",
    "created_at": "2025-07-03T01:07:21.482637"
  },
  "pdf_9aec543c_appointments": {
    "schema": {
      "Appt ID": "string",
      "Patient ID": "string",
      "Doctor": "string",
      "Department": "string",
      "Date": "string",
      "Time": "string",
      "Status": "string",
      "Notes": "text"
    },
    "description": "## Table Description: `pdf_9aec543c_appointments`\n\n### 1. Table Metadata\n\n- **Table Name:** `pdf_9aec543c_appointments`\n- **Table Purpose:** Stores information about medical appointments.\n- **Columns:**\n    - `Appt ID` (VARCHAR(255)): Unique identifier for each appointment.  Potentially a primary key, although this is not explicitly stated.\n    - `Patient ID` (VARCHAR(255)): Identifier for the patient attending the appointment.\n    - `Doctor` (VARCHAR(255)): Name of the doctor conducting the appointment.\n    - `Department` (VARCHAR(255)): Department the appointment belongs to (e.g., Neurology, Pediatrics).\n    - `Date` (VARCHAR(255)): Date of the appointment (YYYY-MM-DD format).\n    - `Time` (VARCHAR(255)): Time of the appointment (HH:MM format).\n    - `Status` (VARCHAR(255)): Status of the appointment (e.g., Scheduled, Completed, Cancelled).\n    - `Notes` (TEXT):  Free-form text field containing notes about the appointment.\n\n\n- **Key Identifier Columns:** `Appt ID` is likely the primary key, uniquely identifying each appointment record.\n\n\n### 2. Sample Data Context\n\n- The sample data represents a subset of appointment records. Each row describes a single appointment, including patient details, doctor, department, date, time, status, and any relevant notes.\n- The data format is consistent across columns. Dates are in YYYY-MM-DD format, times are in HH:MM format.  `Appt ID` and `Patient ID` seem to follow a consistent numerical pattern (e.g., APT0001, PAT0005).\n\n\n### 3. Table Purpose\n\n- This table represents a register of medical appointments.\n- The main use case is to track and manage patient appointments, providing information on scheduling, status, and relevant details for each appointment.\n\n\n### 4. Common Query Patterns\n\n- **Query Type 1: Retrieve appointments based on criteria:**  Selecting appointments based on date range, doctor, patient ID, or status.  Example: `SELECT * FROM pdf_9aec543c_appointments WHERE Doctor = 'John Carson' AND Date BETWEEN '2025-07-10' AND '2025-07-20';`\n\n- **Query Type 2: Count appointments by status or department:** Aggregating data to understand the number of appointments in each status or department. Example: `SELECT Status, COUNT(*) AS AppointmentCount FROM pdf_9aec543c_appointments GROUP BY Status;`\n\n- **Query Type 3:  Find appointments for a specific patient:** Retrieving all appointments associated with a given patient ID.  Example: `SELECT * FROM pdf_9aec543c_appointments WHERE Patient ID = 'PAT0005';`\n\n\n### 5. Data Characteristics\n\n- **Total Number of Records:** 39 (as stated).\n- **Notable Data Patterns/Relationships:**  The data shows a relationship between `Appt ID`, `Patient ID`, `Doctor`, and `Department`.  The `Status` column indicates the current state of each appointment.  The `Notes` column provides additional contextual information.  The data appears to be from a relatively small period of time.  The VARCHAR data types might necessitate string comparisons rather than numerical for efficient querying.  There's potential for data redundancy in that the names of doctors may repeat. The same for patient IDs and Departments.\n\nThis comprehensive description should enable an LLM to effectively understand the structure, content, and usage of the `pdf_9aec543c_appointments` table, facilitating the generation of accurate and relevant SQL queries.",
    "file_hash": "9aec543c",
    "created_at": "2025-07-03T01:07:30.406908"
  },
  "pdf_9aec543c_prescriptions": {
    "schema": {
      "Presc ID": "string",
      "Patient ID": "string",
      "Medication": "string",
      "Dosage": "string",
      "Frequency": "string",
      "Start Date": "string",
      "End Date": "string",
      "Doctor": "string"
    },
    "description": "## Table Description: pdf_9aec543c_prescriptions\n\n### 1. Table Metadata\n\n- **Table Name:** `pdf_9aec543c_prescriptions`\n- **Table Purpose:** This table stores information about medical prescriptions.\n\n- **Columns:**\n    - `Presc ID` (VARCHAR(255)): Unique identifier for each prescription.  This is likely the primary key.\n    - `Patient ID` (VARCHAR(255)): Identifier for the patient receiving the prescription.\n    - `Medication` (VARCHAR(255)): Name of the prescribed medication.\n    - `Dosage` (VARCHAR(255)): Dosage amount and unit (e.g., \"10 mg\", \"500 mcg\").\n    - `Frequency` (VARCHAR(255)): How often the medication should be taken (e.g., \"Twice daily\", \"Once daily\", \"As needed\").\n    - `Start Date` (VARCHAR(255)): Date when the prescription starts.  Stored as text, not a DATE data type.\n    - `End Date` (VARCHAR(255)): Date when the prescription ends. Stored as text, not a DATE data type.\n    - `Doctor` (VARCHAR(255)): Name of the prescribing doctor.\n\n- **Key Identifier Columns:** `Presc ID` is the primary key, uniquely identifying each prescription.\n\n\n### 2. Sample Data Context\n\nThe sample data shows a small subset (50 rows) of prescription records. Each row represents a single prescription, detailing the patient, medication, dosage, frequency, start and end dates, and the prescribing doctor.\n\n- **Data Format:**  The data is primarily text-based. Dates are stored as text strings in YYYY-MM-DD format.\n- **Typical Values:** `Presc ID` values are likely sequential (PRC0001, PRC0002...). `Patient ID` follows a similar pattern.  `Medication`, `Dosage`, `Frequency`, and `Doctor` contain varying text values representing the different medications, dosages, frequencies, and doctors involved.\n\n\n### 3. Table Purpose\n\nThis table represents a record of medical prescriptions. It's used to track prescription details for patients, facilitating medication management and potentially reporting on prescription patterns.  The main use case is providing a centralized repository of prescription information for healthcare providers or a pharmacy system.\n\n\n### 4. Common Query Patterns\n\n- **Retrieve prescriptions for a specific patient:**  `SELECT * FROM pdf_9aec543c_prescriptions WHERE Patient ID = 'PAT0044';`\n- **Find all prescriptions for a particular medication:** `SELECT * FROM pdf_9aec543c_prescriptions WHERE Medication = 'Lisinopril';`\n- **List prescriptions within a specific date range:** `SELECT * FROM pdf_9aec543c_prescriptions WHERE Start Date >= '2025-05-01' AND End Date <= '2025-06-30';`  (Note:  Requires string comparison because dates are stored as text).  Ideally,  `Start Date` and `End Date` columns should be of DATE datatype for efficient date-based querying.\n\n\n### 5. Data Characteristics\n\n- **Total Number of Records:** 50 (as stated, but this is a small sample, the actual table likely contains more data)\n- **Notable Data Patterns or Relationships:**  There's a one-to-many relationship between `Patient ID` and `Presc ID` (one patient can have multiple prescriptions). There is no apparent relationship between `Presc ID` and `Doctor` other than the fact that a doctor prescribed the medication.  The data suggests that the `Presc ID` is auto-incrementing. The use of VARCHAR for dates is less than ideal and will likely slow down queries.\n\n\n**Important Note for LLM:**  The `Start Date` and `End Date` columns being VARCHAR(255) instead of a proper DATE or DATETIME data type is a significant limitation.  Queries involving date comparisons will require string manipulation and will be less efficient.  Consider recommending data type changes if possible within the context of the LLM's application.",
    "file_hash": "9aec543c",
    "created_at": "2025-07-03T01:07:40.929112"
  }
}